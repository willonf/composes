name: general-services

services:
  postgres:
    env_file: .env
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin4:
    env_file: .env
    image: dpage/pgadmin4:latest
    container_name: pgadmin4
    ports:
      - "5433:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # depends_on:
    #   postgres:
    #     condition: service_healthy

  # rabbitmq:
  # env_file: .env
  #   image: rabbitmq:latest
  #   container_name: rabbitmq
  #   ports:
  #     - 5672:5672
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
  #     - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
  #     - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}
  #   restart: always

  redis:
    env_file: .env
    image: redis:latest
    container_name: redis
    ports:
      - 6379:6379
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # jasperserver:
  # env_file: .env
  #   image: retriever/jasperserver:latest
  #   container_name: jasperserver
  #   ports:
  #     - 8089:8080
  #   environment:
  #     - DB_TYPE=${JASPER_DB_TYPE}
  #     - DB_HOST=${JASPER_DB_HOST}
  #     - DB_PORT=${JASPER_DB_PORT}
  #     - DB_USER=${JASPER_DB_USER}
  #     - DB_PASSWORD=${JASPER_DB_PASSWORD}
  #   volumes:
  #     - ./reports-deploy:/jasperserver-import
  #   restart: always

  mssql-server-linux:
    env_file: .env
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: sqlserver
    environment:
        - SA_PASSWORD=${SQL_SERVER_PASSWORD}
        - ACCEPT_EULA=${SQL_SERVER_ACCEPT_EULA}
    volumes:
        - mssqlsystem:/var/opt/mssql
        - mssqluser:/var/opt/sqlserver
    ports:
        - "1433:1433"
    restart: always
    healthcheck:
      test: ["CMD", "/opt/mssql-tools/bin/sqlcmd", "-S", "localhost", "-U", "sa", "-P", "$SQL_SERVER_PASSWORD", "-Q", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  minio:
    env_file: .env
    image: minio/minio:latest
    container_name: minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/epeople && \
        minio server /data --console-address 0.0.0.0:9001
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PROMETHEUS_AUTH_TYPE=${MINIO_PROMETHEUS_AUTH_TYPE}
      - MINIO_UPDATE=${MINIO_UPDATE}
    ports:
      - 7000:9000
      - 7001:9001
    volumes:
      - ./.data/minio:/data
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  portainer:
    image: portainer/portainer-ee:latest
    command: -H unix:///var/run/docker.sock
    container_name: portainer
    ports:
      - 9443:9443
      - 8081:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: always

volumes:
  pgdata:
  # jasperserver-reports:
  mssqlsystem:
  mssqluser:
  portainer_data:

networks:
  general:
    external: false
